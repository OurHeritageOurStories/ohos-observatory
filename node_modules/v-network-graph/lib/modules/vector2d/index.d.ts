import type { Point2D } from './core';
export { Vector2D } from "./vector2d";
export * from "./methods";
import { Vector2D } from "./vector2d";
declare const _default: {
    add(v1: Point2D, v2: Point2D): Point2D;
    add<T extends Point2D>(v1: Point2D, v2: Point2D, target: T): T;
    subtract(v1: Point2D, v2: Point2D): Point2D;
    subtract<T_1 extends Point2D>(v1: Point2D, v2: Point2D, target: T_1): T_1;
    multiply(v1: Point2D, v2: Point2D): Point2D;
    multiply<T_2 extends Point2D>(v1: Point2D, v2: Point2D, target: T_2): T_2;
    multiplyScalar(v: Point2D, scalar: number): Point2D;
    multiplyScalar<T_3 extends Point2D>(v: Point2D, scalar: number, target: T_3): T_3;
    divide(v1: Point2D, v2: Point2D): Point2D;
    divide<T_4 extends Point2D>(v1: Point2D, v2: Point2D, target: T_4): T_4;
    dot(v1: Point2D, v2: Point2D): number;
    cross(v1: Point2D, v2: Point2D): number;
    lengthSquared(v: Point2D): number;
    length(v: Point2D): number;
    distanceSquared(v1: Point2D, v2: Point2D): number;
    distance(v1: Point2D, v2: Point2D): number;
    normalize(v: Point2D): Point2D;
    normalize<T_5 extends Point2D>(v: Point2D, target: T_5): T_5;
    rotate(v: Point2D, angle: number): Point2D;
    rotate<T_6 extends Point2D>(v: Point2D, angle: number, target: T_6): T_6;
    angle(v: Point2D): number;
    angleDegree(v: Point2D): number;
    Vector2D: typeof Vector2D;
};
export default _default;
