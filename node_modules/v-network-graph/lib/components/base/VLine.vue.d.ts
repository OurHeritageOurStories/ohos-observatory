import type { LooseRequired } from '@vue/shared';
import type { DefineComponent, ExtractPropTypes, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import { Position } from '../../common/types';
import { StrokeStyle } from '../../common/configs';
declare const _sfc_main: DefineComponent<{
    p1: {
        type: PropType<Position>;
        required: true;
    };
    p2: {
        type: PropType<Position>;
        required: true;
    };
    config: {
        type: PropType<StrokeStyle>;
        required: true;
    };
}, {
    props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
        p1: {
            type: PropType<Position>;
            required: true;
        };
        p2: {
            type: PropType<Position>;
            required: true;
        };
        config: {
            type: PropType<StrokeStyle>;
            required: true;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
    scale: Ref<number>;
    strokeWidth: ComputedRef<number>;
    strokeDasharray: ComputedRef<string | number | undefined>;
    animationSpeed: ComputedRef<string | undefined>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    p1: {
        type: PropType<Position>;
        required: true;
    };
    p2: {
        type: PropType<Position>;
        required: true;
    };
    config: {
        type: PropType<StrokeStyle>;
        required: true;
    };
}>>, {}>;
export default _sfc_main;
