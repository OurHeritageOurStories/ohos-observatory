import type { HeadMarker } from '../composables/marker';
import type { NodeStates } from '../models/node';
import type { Configs, ShapeStyle, NodeLabelStyle } from '../common/configs';
import type { DefineComponent, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, ExtractPropTypes, CSSProperties,  PropType } from 'vue';
import type { Node, Edge, Path, EventHandlers,  Nodes,  Edges,  InputPaths,  Layouts } from '../common/types';
import { Layers, LayerPosition, Point, Sizes } from '../common/types';
import type { RecursivePartial, Reactive } from '../common/common';
import { SvgPanZoomInstance, Box } from '../modules/svg-pan-zoom-ex';
declare const _sfc_main: DefineComponent<{
    nodes: {
        type: PropType<Nodes>;
        default: () => {};
    };
    edges: {
        type: PropType<Edges>;
        default: () => {};
    };
    paths: {
        type: PropType<InputPaths>;
        default: () => {};
    };
    layouts: {
        type: PropType<RecursivePartial<Layouts>>;
        default: () => {};
    };
    zoomLevel: {
        type: NumberConstructor;
        default: number;
    };
    selectedNodes: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedEdges: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedPaths: {
        type: PropType<string[]>;
        default: () => never[];
    };
    configs: {
        type: PropType<RecursivePartial<Configs<Node, Edge, Path>>>;
        default: () => {};
    };
    layers: {
        type: PropType<Layers>;
        default: () => {};
    };
    eventHandlers: {
        type: PropType<EventHandlers>;
        default: () => {};
    };
}, {
    container: Ref<HTMLDivElement | undefined>;
    svg: Ref<(SVGElement & SVGSVGElement) | undefined>;
    viewport: Ref<SVGGElement | undefined>;
    show: ComputedRef<boolean>;
    svgPanZoom: Ref<SvgPanZoomInstance | undefined>;
    allConfigs: Configs<Node, Edge, Path>;
    layerDefs: ComputedRef<Record<LayerPosition, string[]>>;
    isShowGrid: ComputedRef<boolean>;
    isShowBackgroundViewport: ComputedRef<boolean>;
    overrideNodes: ComputedRef<boolean>;
    overrideNodeLabels: ComputedRef<boolean>;
    overrideEdgeLabels: ComputedRef<boolean>;
    overrideEdgesLabels: ComputedRef<boolean>;
    scale: ComputedRef<number>;
    nodeStates: NodeStates;
    nodeZOrderedList: ComputedRef<{
        id: string;
        shape: ShapeStyle;
        staticShape: ShapeStyle;
        label: NodeLabelStyle;
        labelText: string;
        selected: boolean;
        hovered: boolean;
        draggable: boolean;
        selectable: number | boolean;
        zIndex: number;
    }[]>;
    currentSelectedNodes: Reactive<Set<string>>;
    markers: Record<string, HeadMarker>;
    dragging: Ref<boolean>;
    touches: ComputedRef<boolean | ((target: Node) => boolean)>;
    currentLayouts: Reactive<Layouts>;
    visibleNodeFocusRing: ComputedRef<boolean>;
    visiblePaths: ComputedRef<boolean>;
    transitionOption: Ref<{
        enabled: boolean;
        duration: number;
        timingFunction: string;
    }>;
    transitionStyles: ComputedRef<CSSProperties>;
    fitToContents: () => void;
    panToCenter: () => void;
    getViewBox: () => Box;
    setViewBox: (box: Box) => void | undefined;
    transitionWhile: (func: () => void | Promise<void>, duration?: number, timingFunction?: string) => void;
}, unknown, {}, {
    /**
     * Zoom in
     */
    zoomIn(): void;
    /**
     * Zoom out
     */
    zoomOut(): void;
    /**
     * Pan to a rendered position
     * @return {Point} point to pan
     */
    panTo(point: Point): void;
    /**
     * Relatively pan the graph by a specified rendered position vector
     * @return {Point} relative point to pan
     */
    panBy(point: Point): void;
    /**
     * Get pan vector
     * @return {Point} pan vector
     */
    getPan(): Point;
    /**
     * Get all calculate svg dimensions
     */
    getSizes(): Sizes;
    /**
     * Translate from DOM to SVG coordinates
     * @return {Point} coordinates in the SVG
     */
    translateFromDomToSvgCoordinates(coordinates: Point): Point;
    /**
     * Translate from SVG to DOM coordinates
     * @return {Point} coordinates in the DOM
     */
    translateFromSvgToDomCoordinates(coordinates: Point): Point;
    /**
     * Get graph as SVG text.
     * @return {string} SVG text
     */
    getAsSvg(): string;
}, ComponentOptionsMixin, ComponentOptionsMixin, ("update:zoomLevel" | "update:selectedNodes" | "update:selectedEdges" | "update:selectedPaths" | "update:layouts")[], "update:zoomLevel" | "update:selectedNodes" | "update:selectedEdges" | "update:selectedPaths" | "update:layouts", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    nodes: {
        type: PropType<Nodes>;
        default: () => {};
    };
    edges: {
        type: PropType<Edges>;
        default: () => {};
    };
    paths: {
        type: PropType<InputPaths>;
        default: () => {};
    };
    layouts: {
        type: PropType<RecursivePartial<Layouts>>;
        default: () => {};
    };
    zoomLevel: {
        type: NumberConstructor;
        default: number;
    };
    selectedNodes: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedEdges: {
        type: PropType<string[]>;
        default: () => never[];
    };
    selectedPaths: {
        type: PropType<string[]>;
        default: () => never[];
    };
    configs: {
        type: PropType<RecursivePartial<Configs<Node, Edge, Path>>>;
        default: () => {};
    };
    layers: {
        type: PropType<Layers>;
        default: () => {};
    };
    eventHandlers: {
        type: PropType<EventHandlers>;
        default: () => {};
    };
}>> & {
    "onUpdate:zoomLevel"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedNodes"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedEdges"?: ((...args: any[]) => any) | undefined;
    "onUpdate:selectedPaths"?: ((...args: any[]) => any) | undefined;
    "onUpdate:layouts"?: ((...args: any[]) => any) | undefined;
}, {
    layouts: RecursivePartial<Layouts>;
    edges: Edges;
    zoomLevel: number;
    nodes: Nodes;
    paths: InputPaths;
    selectedNodes: string[];
    selectedEdges: string[];
    selectedPaths: string[];
    configs: RecursivePartial<Configs<Node, Edge, Path>>;
    layers: Layers;
    eventHandlers: EventHandlers;
}>;
export default _sfc_main;
