import type { LooseRequired } from '@vue/shared';
import type { ShapeStyle, NodeLabelStyle, NodeConfig, AnyShapeStyle, LabelStyle } from '../../common/configs';
import type { DefineComponent, ExtractPropTypes, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Node, Position } from '../../common/types';
declare const _sfc_main: DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            shape: ShapeStyle;
            staticShape: ShapeStyle;
            label: NodeLabelStyle;
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
            zIndex: number;
        }>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}, {
    props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: PropType<{
                id: string;
                shape: ShapeStyle;
                staticShape: ShapeStyle;
                label: NodeLabelStyle;
                labelText: string;
                selected: boolean;
                hovered: boolean;
                draggable: boolean;
                selectable: number | boolean;
                zIndex: number;
            }>;
            required: true;
        };
        pos: {
            type: PropType<Position>;
            required: false;
            default: undefined;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
    x: ComputedRef<number>;
    y: ComputedRef<number>;
    config: NodeConfig<Node>;
    scale: Ref<number>;
    handleNodePointerDownEvent: (node: string, event: PointerEvent) => void;
    handleNodePointerOverEvent: (node: string, event: PointerEvent) => void;
    handleNodePointerOutEvent: (node: string, event: PointerEvent) => void;
    handleNodeClickEvent: (node: string, event: MouseEvent) => void;
    handleNodeDoubleClickEvent: (node: string, event: MouseEvent) => void;
    handleNodeContextMenu: (node: string, event: MouseEvent) => void;
    labelVisibility: ComputedRef<string | false>;
    labelMargin: ComputedRef<number>;
    labelShiftV: Ref<number>;
    labelShiftH: Ref<number>;
    labelDiagonalShiftV: Ref<number>;
    labelDiagonalShiftH: Ref<number>;
    textAnchor: ComputedRef<"middle" | "start" | "end">;
    dominantBaseline: ComputedRef<"text-top" | "hanging" | "central">;
    labelX: ComputedRef<number>;
    labelY: ComputedRef<number>;
    VShape: DefineComponent<{
        baseX: {
            type: NumberConstructor;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            default: number;
        };
        config: {
            type: PropType<AnyShapeStyle>;
            required: true;
        };
    }, {
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            baseX: {
                type: NumberConstructor;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                default: number;
            };
            config: {
                type: PropType<AnyShapeStyle>;
                required: true;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        scale: Ref<number>;
        x: Ref<number>;
        y: Ref<number>;
        strokeWidth: Ref<number>;
        strokeColor: Ref<string>;
        strokeDasharray: Ref<string | number | undefined>;
        radius: Ref<number>;
        width: Ref<number>;
        height: Ref<number>;
        borderRadius: Ref<number>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        baseX: {
            type: NumberConstructor;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            default: number;
        };
        config: {
            type: PropType<AnyShapeStyle>;
            required: true;
        };
    }>>, {
        baseX: number;
        baseY: number;
    }>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }, {
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
            };
            x: {
                type: NumberConstructor;
                required: true;
            };
            y: {
                type: NumberConstructor;
                required: true;
            };
            dominantBaseline: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            config: {
                type: PropType<LabelStyle>;
                required: true;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }>>, {
        dominantBaseline: string;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            shape: ShapeStyle;
            staticShape: ShapeStyle;
            label: NodeLabelStyle;
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
            zIndex: number;
        }>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}>>, {
    pos: Position;
}>;
export default _sfc_main;
