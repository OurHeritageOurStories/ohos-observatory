import type { LooseRequired } from '@vue/shared';
import type { DefineComponent, ExtractPropTypes, ComputedRef, Ref, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Node, Position } from '../../common/types';
import type { NodeLabelStyle, NodeConfig, ShapeType, AnyShapeStyle, ShapeStyle } from '../../common/configs';
declare const _sfc_main: DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            shape: ShapeStyle;
            staticShape: ShapeStyle;
            label: NodeLabelStyle;
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
            zIndex: number;
        }>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}, {
    props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
        id: {
            type: StringConstructor;
            required: true;
        };
        state: {
            type: PropType<{
                id: string;
                shape: ShapeStyle;
                staticShape: ShapeStyle;
                label: NodeLabelStyle;
                labelText: string;
                selected: boolean;
                hovered: boolean;
                draggable: boolean;
                selectable: number | boolean;
                zIndex: number;
            }>;
            required: true;
        };
        pos: {
            type: PropType<Position>;
            required: false;
            default: undefined;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
    x: ComputedRef<number>;
    y: ComputedRef<number>;
    config: NodeConfig<Node>;
    shapeConfig: {
        type: ShapeType;
        radius: number;
        strokeWidth: number;
        strokeColor?: string | undefined;
        strokeDasharray?: string | number | undefined;
        color: string;
        width: number;
        height: number;
        borderRadius: number;
    };
    VShape: DefineComponent<{
        baseX: {
            type: NumberConstructor;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            default: number;
        };
        config: {
            type: PropType<AnyShapeStyle>;
            required: true;
        };
    }, {
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            baseX: {
                type: NumberConstructor;
                default: number;
            };
            baseY: {
                type: NumberConstructor;
                default: number;
            };
            config: {
                type: PropType<AnyShapeStyle>;
                required: true;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        scale: Ref<number>;
        x: Ref<number>;
        y: Ref<number>;
        strokeWidth: Ref<number>;
        strokeColor: Ref<string>;
        strokeDasharray: Ref<string | number | undefined>;
        radius: Ref<number>;
        width: Ref<number>;
        height: Ref<number>;
        borderRadius: Ref<number>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        baseX: {
            type: NumberConstructor;
            default: number;
        };
        baseY: {
            type: NumberConstructor;
            default: number;
        };
        config: {
            type: PropType<AnyShapeStyle>;
            required: true;
        };
    }>>, {
        baseX: number;
        baseY: number;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            shape: ShapeStyle;
            staticShape: ShapeStyle;
            label: NodeLabelStyle;
            labelText: string;
            selected: boolean;
            hovered: boolean;
            draggable: boolean;
            selectable: number | boolean;
            zIndex: number;
        }>;
        required: true;
    };
    pos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}>>, {
    pos: Position;
}>;
export default _sfc_main;
