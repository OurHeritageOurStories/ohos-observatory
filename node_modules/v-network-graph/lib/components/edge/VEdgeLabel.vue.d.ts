import type { LooseRequired } from '@vue/shared';
import type { DefineComponent, ExtractPropTypes, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType,  Ref } from 'vue';
import type { LabelStyle, EdgeLabelStyle } from '../../common/configs';
import { Edge, EdgeLabelArea } from '../../common/types';
declare const _sfc_main: DefineComponent<{
    area: {
        type: PropType<EdgeLabelArea>;
        required: true;
    };
    config: {
        type: PropType<EdgeLabelStyle>;
        required: true;
    };
    text: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    align: {
        type: PropType<"center" | "source" | "target">;
        required: false;
        default: string;
    };
    verticalAlign: {
        type: PropType<"center" | "above" | "below">;
        required: false;
        default: string;
    };
    edge: {
        type: PropType<Edge>;
        required: false;
        default: undefined;
    };
    hovered: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    scale: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}, {
    props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
        area: {
            type: PropType<EdgeLabelArea>;
            required: true;
        };
        config: {
            type: PropType<EdgeLabelStyle>;
            required: true;
        };
        text: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        align: {
            type: PropType<"center" | "source" | "target">;
            required: false;
            default: string;
        };
        verticalAlign: {
            type: PropType<"center" | "above" | "below">;
            required: false;
            default: string;
        };
        edge: {
            type: PropType<Edge>;
            required: false;
            default: undefined;
        };
        hovered: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        selected: {
            type: BooleanConstructor;
            required: false;
            default: boolean;
        };
        scale: {
            type: NumberConstructor;
            required: false;
            default: undefined;
        };
    }>> & {
        [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
    }>>;
    x: Ref<number>;
    y: Ref<number>;
    textAnchor: Ref<"middle" | "start" | "end">;
    dominantBaseline: Ref<"text-top" | "hanging" | "central">;
    angle: Ref<number>;
    updatedConfig: ComputedRef<EdgeLabelStyle>;
    VText: DefineComponent<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }, {
        updateBackgroundPosition: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => void;
        enableMutationObserver: (element: SVGTextElement, pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        }, transform: Ref<string | undefined>) => MutationObserver;
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            text: {
                type: StringConstructor;
                required: true;
            };
            x: {
                type: NumberConstructor;
                required: true;
            };
            y: {
                type: NumberConstructor;
                required: true;
            };
            dominantBaseline: {
                type: StringConstructor;
                required: false;
                default: string;
            };
            config: {
                type: PropType<LabelStyle>;
                required: true;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        attrs: {
            [x: string]: unknown;
        };
        scale: Ref<number>;
        texts: ComputedRef<string[]>;
        fontSize: ComputedRef<number>;
        lineHeight: ComputedRef<number>;
        topDeltaY: ComputedRef<number>;
        element: Ref<SVGTextElement | undefined>;
        transform: Ref<string>;
        pos: {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        backgroundRectPos: ComputedRef<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        observer: MutationObserver | undefined;
        updateObserver: () => void;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        text: {
            type: StringConstructor;
            required: true;
        };
        x: {
            type: NumberConstructor;
            required: true;
        };
        y: {
            type: NumberConstructor;
            required: true;
        };
        dominantBaseline: {
            type: StringConstructor;
            required: false;
            default: string;
        };
        config: {
            type: PropType<LabelStyle>;
            required: true;
        };
    }>>, {
        dominantBaseline: string;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    area: {
        type: PropType<EdgeLabelArea>;
        required: true;
    };
    config: {
        type: PropType<EdgeLabelStyle>;
        required: true;
    };
    text: {
        type: StringConstructor;
        required: false;
        default: string;
    };
    align: {
        type: PropType<"center" | "source" | "target">;
        required: false;
        default: string;
    };
    verticalAlign: {
        type: PropType<"center" | "above" | "below">;
        required: false;
        default: string;
    };
    edge: {
        type: PropType<Edge>;
        required: false;
        default: undefined;
    };
    hovered: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    selected: {
        type: BooleanConstructor;
        required: false;
        default: boolean;
    };
    scale: {
        type: NumberConstructor;
        required: false;
        default: undefined;
    };
}>>, {
    selected: boolean;
    hovered: boolean;
    edge: Edge;
    scale: number;
    text: string;
    align: "center" | "source" | "target";
    verticalAlign: "center" | "above" | "below";
}>;
export default _sfc_main;
