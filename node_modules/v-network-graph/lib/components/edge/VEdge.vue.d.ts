import type { LooseRequired } from '@vue/shared';
import type { Vector2D, EdgeConfig, StrokeStyle } from '../..';
import type { Point2D } from '../../modules/vector2d/core';
import type { Line } from '../../models/edge';
import type { DefineComponent, WatchStopHandle, ExtractPropTypes, Ref, ComputedRef, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, PropType } from 'vue';
import type { Edge, Position } from '../../common/types';
declare const _sfc_main: DefineComponent<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            line: Line;
            selectable: number | boolean;
            selected: boolean;
            hovered: boolean;
            origin: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            labelPosition: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            position: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            curve?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                theta: number;
                circle: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    radius: number;
                };
                control: {
                    x: number;
                    y: number;
                }[];
            } | undefined;
            sourceMarkerId?: string | undefined;
            targetMarkerId?: string | undefined;
            zIndex: number;
            stopWatchHandle: WatchStopHandle;
        }>;
        required: true;
    };
    sourcePos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
    targetPos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}, {
    config: EdgeConfig<Edge>;
    VLine: DefineComponent<{
        p1: {
            type: PropType<Position>;
            required: true;
        };
        p2: {
            type: PropType<Position>;
            required: true;
        };
        config: {
            type: PropType<StrokeStyle>;
            required: true;
        };
    }, {
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            p1: {
                type: PropType<Position>;
                required: true;
            };
            p2: {
                type: PropType<Position>;
                required: true;
            };
            config: {
                type: PropType<StrokeStyle>;
                required: true;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        scale: Ref<number>;
        strokeWidth: ComputedRef<number>;
        strokeDasharray: ComputedRef<string | number | undefined>;
        animationSpeed: ComputedRef<string | undefined>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        p1: {
            type: PropType<Position>;
            required: true;
        };
        p2: {
            type: PropType<Position>;
            required: true;
        };
        config: {
            type: PropType<StrokeStyle>;
            required: true;
        };
    }>>, {}>;
    VEdgeCurved: DefineComponent<{
        state: {
            type: PropType<{
                id: string;
                line: Line;
                selectable: number | boolean;
                selected: boolean;
                hovered: boolean;
                origin: {
                    p1: {
                        x: number;
                        y: number;
                    };
                    p2: {
                        x: number;
                        y: number;
                    };
                };
                labelPosition: {
                    p1: {
                        x: number;
                        y: number;
                    };
                    p2: {
                        x: number;
                        y: number;
                    };
                };
                position: {
                    p1: {
                        x: number;
                        y: number;
                    };
                    p2: {
                        x: number;
                        y: number;
                    };
                };
                curve?: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    theta: number;
                    circle: {
                        center: {
                            x: number;
                            y: number;
                            add: (v: Point2D) => Vector2D;
                            subtract: (v: Point2D) => Vector2D;
                            multiply: (v: Point2D) => Vector2D;
                            multiplyScalar: (scalar: number) => Vector2D;
                            divide: (v: Point2D) => Vector2D;
                            dot: (v: Point2D) => number;
                            cross: (v: Point2D) => number;
                            lengthSquared: () => number;
                            length: () => number;
                            distanceSquared: (v: Point2D) => number;
                            distance: (v: Point2D) => number;
                            normalize: () => Vector2D;
                            angle: () => number;
                            angleDegree: () => number;
                            rotate: (angle: number) => Vector2D;
                            isEqualTo: (v: Point2D) => boolean;
                            clone: () => Vector2D;
                            toObject: () => Point2D;
                            toArray: () => [number, number];
                        };
                        radius: number;
                    };
                    control: {
                        x: number;
                        y: number;
                    }[];
                } | undefined;
                sourceMarkerId?: string | undefined;
                targetMarkerId?: string | undefined;
                zIndex: number;
                stopWatchHandle: WatchStopHandle;
            }>;
            required: true;
        };
        config: {
            type: PropType<StrokeStyle>;
            required: true;
        };
        markerStart: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        markerEnd: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
    }, {
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            state: {
                type: PropType<{
                    id: string;
                    line: Line;
                    selectable: number | boolean;
                    selected: boolean;
                    hovered: boolean;
                    origin: {
                        p1: {
                            x: number;
                            y: number;
                        };
                        p2: {
                            x: number;
                            y: number;
                        };
                    };
                    labelPosition: {
                        p1: {
                            x: number;
                            y: number;
                        };
                        p2: {
                            x: number;
                            y: number;
                        };
                    };
                    position: {
                        p1: {
                            x: number;
                            y: number;
                        };
                        p2: {
                            x: number;
                            y: number;
                        };
                    };
                    curve?: {
                        center: {
                            x: number;
                            y: number;
                            add: (v: Point2D) => Vector2D;
                            subtract: (v: Point2D) => Vector2D;
                            multiply: (v: Point2D) => Vector2D;
                            multiplyScalar: (scalar: number) => Vector2D;
                            divide: (v: Point2D) => Vector2D;
                            dot: (v: Point2D) => number;
                            cross: (v: Point2D) => number;
                            lengthSquared: () => number;
                            length: () => number;
                            distanceSquared: (v: Point2D) => number;
                            distance: (v: Point2D) => number;
                            normalize: () => Vector2D;
                            angle: () => number;
                            angleDegree: () => number;
                            rotate: (angle: number) => Vector2D;
                            isEqualTo: (v: Point2D) => boolean;
                            clone: () => Vector2D;
                            toObject: () => Point2D;
                            toArray: () => [number, number];
                        };
                        theta: number;
                        circle: {
                            center: {
                                x: number;
                                y: number;
                                add: (v: Point2D) => Vector2D;
                                subtract: (v: Point2D) => Vector2D;
                                multiply: (v: Point2D) => Vector2D;
                                multiplyScalar: (scalar: number) => Vector2D;
                                divide: (v: Point2D) => Vector2D;
                                dot: (v: Point2D) => number;
                                cross: (v: Point2D) => number;
                                lengthSquared: () => number;
                                length: () => number;
                                distanceSquared: (v: Point2D) => number;
                                distance: (v: Point2D) => number;
                                normalize: () => Vector2D;
                                angle: () => number;
                                angleDegree: () => number;
                                rotate: (angle: number) => Vector2D;
                                isEqualTo: (v: Point2D) => boolean;
                                clone: () => Vector2D;
                                toObject: () => Point2D;
                                toArray: () => [number, number];
                            };
                            radius: number;
                        };
                        control: {
                            x: number;
                            y: number;
                        }[];
                    } | undefined;
                    sourceMarkerId?: string | undefined;
                    targetMarkerId?: string | undefined;
                    zIndex: number;
                    stopWatchHandle: WatchStopHandle;
                }>;
                required: true;
            };
            config: {
                type: PropType<StrokeStyle>;
                required: true;
            };
            markerStart: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
            markerEnd: {
                type: StringConstructor;
                required: false;
                default: undefined;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        scale: Ref<number>;
        pathD: ComputedRef<string>;
        strokeWidth: ComputedRef<number>;
        strokeDasharray: ComputedRef<string | number | undefined>;
        animationSpeed: ComputedRef<string | undefined>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        state: {
            type: PropType<{
                id: string;
                line: Line;
                selectable: number | boolean;
                selected: boolean;
                hovered: boolean;
                origin: {
                    p1: {
                        x: number;
                        y: number;
                    };
                    p2: {
                        x: number;
                        y: number;
                    };
                };
                labelPosition: {
                    p1: {
                        x: number;
                        y: number;
                    };
                    p2: {
                        x: number;
                        y: number;
                    };
                };
                position: {
                    p1: {
                        x: number;
                        y: number;
                    };
                    p2: {
                        x: number;
                        y: number;
                    };
                };
                curve?: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    theta: number;
                    circle: {
                        center: {
                            x: number;
                            y: number;
                            add: (v: Point2D) => Vector2D;
                            subtract: (v: Point2D) => Vector2D;
                            multiply: (v: Point2D) => Vector2D;
                            multiplyScalar: (scalar: number) => Vector2D;
                            divide: (v: Point2D) => Vector2D;
                            dot: (v: Point2D) => number;
                            cross: (v: Point2D) => number;
                            lengthSquared: () => number;
                            length: () => number;
                            distanceSquared: (v: Point2D) => number;
                            distance: (v: Point2D) => number;
                            normalize: () => Vector2D;
                            angle: () => number;
                            angleDegree: () => number;
                            rotate: (angle: number) => Vector2D;
                            isEqualTo: (v: Point2D) => boolean;
                            clone: () => Vector2D;
                            toObject: () => Point2D;
                            toArray: () => [number, number];
                        };
                        radius: number;
                    };
                    control: {
                        x: number;
                        y: number;
                    }[];
                } | undefined;
                sourceMarkerId?: string | undefined;
                targetMarkerId?: string | undefined;
                zIndex: number;
                stopWatchHandle: WatchStopHandle;
            }>;
            required: true;
        };
        config: {
            type: PropType<StrokeStyle>;
            required: true;
        };
        markerStart: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
        markerEnd: {
            type: StringConstructor;
            required: false;
            default: undefined;
        };
    }>>, {
        markerStart: string;
        markerEnd: string;
    }>;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
    id: {
        type: StringConstructor;
        required: true;
    };
    state: {
        type: PropType<{
            id: string;
            line: Line;
            selectable: number | boolean;
            selected: boolean;
            hovered: boolean;
            origin: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            labelPosition: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            position: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
            };
            curve?: {
                center: {
                    x: number;
                    y: number;
                    add: (v: Point2D) => Vector2D;
                    subtract: (v: Point2D) => Vector2D;
                    multiply: (v: Point2D) => Vector2D;
                    multiplyScalar: (scalar: number) => Vector2D;
                    divide: (v: Point2D) => Vector2D;
                    dot: (v: Point2D) => number;
                    cross: (v: Point2D) => number;
                    lengthSquared: () => number;
                    length: () => number;
                    distanceSquared: (v: Point2D) => number;
                    distance: (v: Point2D) => number;
                    normalize: () => Vector2D;
                    angle: () => number;
                    angleDegree: () => number;
                    rotate: (angle: number) => Vector2D;
                    isEqualTo: (v: Point2D) => boolean;
                    clone: () => Vector2D;
                    toObject: () => Point2D;
                    toArray: () => [number, number];
                };
                theta: number;
                circle: {
                    center: {
                        x: number;
                        y: number;
                        add: (v: Point2D) => Vector2D;
                        subtract: (v: Point2D) => Vector2D;
                        multiply: (v: Point2D) => Vector2D;
                        multiplyScalar: (scalar: number) => Vector2D;
                        divide: (v: Point2D) => Vector2D;
                        dot: (v: Point2D) => number;
                        cross: (v: Point2D) => number;
                        lengthSquared: () => number;
                        length: () => number;
                        distanceSquared: (v: Point2D) => number;
                        distance: (v: Point2D) => number;
                        normalize: () => Vector2D;
                        angle: () => number;
                        angleDegree: () => number;
                        rotate: (angle: number) => Vector2D;
                        isEqualTo: (v: Point2D) => boolean;
                        clone: () => Vector2D;
                        toObject: () => Point2D;
                        toArray: () => [number, number];
                    };
                    radius: number;
                };
                control: {
                    x: number;
                    y: number;
                }[];
            } | undefined;
            sourceMarkerId?: string | undefined;
            targetMarkerId?: string | undefined;
            zIndex: number;
            stopWatchHandle: WatchStopHandle;
        }>;
        required: true;
    };
    sourcePos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
    targetPos: {
        type: PropType<Position>;
        required: false;
        default: undefined;
    };
}>>, {
    sourcePos: Position;
    targetPos: Position;
}>;
export default _sfc_main;
