import type { LooseRequired } from '@vue/shared';
import type { PathConfig, PathStrokeStyle } from '../../common/configs';
import type { EdgeStates } from '../../models/edge';
import type { NodeStates } from '../../models/node';
import type { DefineComponent, ComputedRef, Ref, PropType, ExtractPropTypes, ComponentOptionsMixin, VNodeProps, AllowedComponentProps, ComponentCustomProps, EmitsOptions } from 'vue';
import type { Layouts, Path, PositionOrCurve } from '../../common/types';
import type { EdgeObject, PathState } from '../../models/path';
declare const _sfc_main: DefineComponent<{}, {
    pathZOrderedList: ComputedRef<{
        id: string;
        selected: boolean;
        hovered: boolean;
        selectable: number | boolean;
        zIndex: number;
        clickable: boolean;
        hoverable: boolean;
        path: {
            [x: string]: any;
            id?: string | undefined;
            edges: string[];
        };
        edges: EdgeObject[];
    }[]>;
    nodeStates: NodeStates;
    edgeStates: EdgeStates;
    layouts: Layouts;
    scale: Ref<number>;
    pathConfig: PathConfig<Path>;
    handlePathPointerDownEvent: (path: string, event: PointerEvent) => void;
    handlePathPointerOverEvent: (path: string, event: PointerEvent) => void;
    handlePathPointerOutEvent: (path: string, event: PointerEvent) => void;
    handlePathClickEvent: (path: string, event: MouseEvent) => void;
    handlePathDoubleClickEvent: (path: string, event: MouseEvent) => void;
    handlePathContextMenu: (path: string, event: MouseEvent) => void;
    calcPathPoints: ComputedRef<(path: PathState) => PositionOrCurve[]>;
    VPathLine: DefineComponent<{
        points: {
            type: PropType<PositionOrCurve[]>;
            required: true;
        };
        path: {
            type: PropType<{
                id: string;
                selected: boolean;
                hovered: boolean;
                selectable: number | boolean;
                zIndex: number;
                clickable: boolean;
                hoverable: boolean;
                path: {
                    [x: string]: any;
                    id?: string | undefined;
                    edges: string[];
                };
                edges: EdgeObject[];
            }>;
            required: true;
        };
    }, {
        props: Readonly<LooseRequired<Readonly<ExtractPropTypes<{
            points: {
                type: PropType<PositionOrCurve[]>;
                required: true;
            };
            path: {
                type: PropType<{
                    id: string;
                    selected: boolean;
                    hovered: boolean;
                    selectable: number | boolean;
                    zIndex: number;
                    clickable: boolean;
                    hoverable: boolean;
                    path: {
                        [x: string]: any;
                        id?: string | undefined;
                        edges: string[];
                    };
                    edges: EdgeObject[];
                }>;
                required: true;
            };
        }>> & {
            [x: string & `on${string}`]: ((...args: any[]) => any) | ((...args: unknown[]) => any) | undefined;
        }>>;
        scale: Ref<number>;
        pathConfig: PathConfig<Path>;
        d: ComputedRef<string>;
        config: ComputedRef<PathStrokeStyle>;
        strokeDasharray: ComputedRef<string | number | undefined>;
        animationSpeed: ComputedRef<string | undefined>;
    }, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, Record<string, any>, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{
        points: {
            type: PropType<PositionOrCurve[]>;
            required: true;
        };
        path: {
            type: PropType<{
                id: string;
                selected: boolean;
                hovered: boolean;
                selectable: number | boolean;
                zIndex: number;
                clickable: boolean;
                hoverable: boolean;
                path: {
                    [x: string]: any;
                    id?: string | undefined;
                    edges: string[];
                };
                edges: EdgeObject[];
            }>;
            required: true;
        };
    }>>, {}>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, EmitsOptions, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}>;
export default _sfc_main;
